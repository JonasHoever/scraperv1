#!/usr/bin/env python
"""
Test-Script f√ºr die Versicherungsmakler Finder Webapp
√úberpr√ºft die grundlegenden Funktionalit√§ten ohne Google Maps API Key
"""

import os
import sys
import requests
from datetime import datetime

def test_webapp():
    """Testet die grundlegende Webapp-Funktionalit√§t"""
    print("üîç Teste Versicherungsmakler Finder Webapp")
    print("=" * 50)
    
    # Test 1: Import-Test
    print("\n1. Teste Python-Imports...")
    try:
        from app import app
        print("‚úÖ Flask App importiert")
        
        import googlemaps
        print("‚úÖ Google Maps API Client verf√ºgbar")
        
        from bs4 import BeautifulSoup
        print("‚úÖ BeautifulSoup f√ºr Web-Scraping verf√ºgbar")
        
        import requests
        print("‚úÖ Requests f√ºr HTTP-Calls verf√ºgbar")
        
        from utils.geocoding import get_coordinates
        from utils.scraper import scrape_broker_website
        from utils.api_client import forward_to_external_api
        print("‚úÖ Alle Utility-Module verf√ºgbar")
        
    except ImportError as e:
        print(f"‚ùå Import-Fehler: {e}")
        return False
    
    # Test 2: Flask App Konfiguration
    print("\n2. Teste Flask App Konfiguration...")
    try:
        app.config['TESTING'] = True
        client = app.test_client()
        
        # Test Startseite
        response = client.get('/')
        if response.status_code == 200:
            print("‚úÖ Startseite l√§dt korrekt")
        else:
            print(f"‚ùå Startseite Fehler: {response.status_code}")
        
        # Test API Endpoint
        response = client.get('/api/brokers')
        if response.status_code == 200:
            print("‚úÖ API Endpoint funktioniert")
        else:
            print(f"‚ùå API Endpoint Fehler: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Flask-Test Fehler: {e}")
        return False
    
    # Test 3: Umgebungsvariablen
    print("\n3. Teste Umgebungskonfiguration...")
    
    env_file = "/Users/jonashover/Documents/vsc/scrum/.env"
    if os.path.exists(env_file):
        print("‚úÖ .env Datei gefunden")
    else:
        print("‚ö†Ô∏è  .env Datei nicht gefunden - erstelle Beispiel-Datei")
        create_example_env()
    
    # Test 4: Template-Dateien
    print("\n4. Teste Templates...")
    template_files = [
        'templates/base.html',
        'templates/index.html', 
        'templates/results.html',
        'templates/404.html',
        'templates/500.html'
    ]
    
    for template in template_files:
        if os.path.exists(template):
            print(f"‚úÖ {template} vorhanden")
        else:
            print(f"‚ùå {template} fehlt")
    
    # Test 5: Statische Dateien
    print("\n5. Teste statische Dateien...")
    static_files = [
        'static/css/style.css',
        'static/js/app.js'
    ]
    
    for static_file in static_files:
        if os.path.exists(static_file):
            print(f"‚úÖ {static_file} vorhanden")
        else:
            print(f"‚ùå {static_file} fehlt")
    
    return True


def create_example_env():
    """Erstellt eine Beispiel .env Datei"""
    env_content = """# Kopiere diese Datei zu .env und f√ºlle die Werte aus

# Google Maps API Key - erforderlich f√ºr Standortsuche und Gesch√§ftssuche
GOOGLE_MAPS_API_KEY=your_google_maps_api_key_here

# URL der externen API f√ºr die Weiterleitung von Makler-Daten
EXTERNAL_API_URL=https://your-external-api.com/endpoint

# Flask Konfiguration
FLASK_ENV=development
FLASK_DEBUG=True
SECRET_KEY=your_secret_key_here

# Optional: Datenbankverbindung
DATABASE_URL=sqlite:///brokers.db
"""
    
    with open('.env', 'w') as f:
        f.write(env_content)
    print("üìù .env Datei erstellt")


def demo_scraping():
    """Demonstriert die Scraping-Funktionalit√§t mit einer Test-Website"""
    print("\nüï∑Ô∏è  Demo: Web-Scraping Funktionalit√§t")
    print("=" * 40)
    
    # Test mit einer √∂ffentlichen Test-Website
    test_url = "https://httpbin.org/html"
    
    try:
        from utils.scraper import scrape_broker_website
        result = scrape_broker_website(test_url)
        
        print(f"Scraping-Test f√ºr {test_url}:")
        for key, value in result.items():
            print(f"  {key}: {value}")
            
        print("‚úÖ Scraping-Funktionalit√§t funktioniert")
        
    except Exception as e:
        print(f"‚ùå Scraping-Fehler: {e}")


def show_usage_instructions():
    """Zeigt Nutzungsanweisungen"""
    print("\nüìã Anweisungen zur Nutzung:")
    print("=" * 40)
    print("1. Erstelle eine .env Datei mit deinem Google Maps API Key:")
    print("   cp .env.example .env")
    print("   # Bearbeite .env und trage deinen API Key ein")
    print("\n2. Starte die Anwendung:")
    print("   python app.py")
    print("\n3. √ñffne im Browser:")
    print("   http://localhost:5000")
    print("\n4. F√ºr die externe API-Integration:")
    print("   Trage die EXTERNAL_API_URL in der .env Datei ein")
    
    print("\nüîë Google Maps API Key erhalten:")
    print("1. Gehe zu: https://console.cloud.google.com/")
    print("2. Erstelle ein neues Projekt oder w√§hle ein bestehendes")
    print("3. Aktiviere die APIs: Maps JavaScript API, Places API, Geocoding API")
    print("4. Erstelle Anmeldedaten (API-Schl√ºssel)")
    print("5. Trage den Schl√ºssel in die .env Datei ein")


def main():
    """Hauptfunktion"""
    print("üöÄ Versicherungsmakler Finder - Test & Demo")
    print(f"Zeitstempel: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)
    
    # Wechsle ins Projektverzeichnis
    os.chdir("/Users/jonashover/Documents/vsc/scrum")
    
    # F√ºhre Tests durch
    success = test_webapp()
    
    if success:
        print("\nüéâ Alle Tests erfolgreich!")
        
        # Demo Scraping
        demo_scraping()
        
        # Zeige Nutzungsanweisungen
        show_usage_instructions()
        
        print("\n‚ú® Die Webapp ist bereit!")
        print("Starte sie mit: python app.py")
        
    else:
        print("\n‚ùå Tests fehlgeschlagen. Bitte √ºberpr√ºfe die Installation.")
        return 1
    
    return 0


if __name__ == "__main__":
    sys.exit(main())
